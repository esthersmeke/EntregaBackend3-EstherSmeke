components:
  schemas:
    User:
      type: object
      properties:
        name:
          type: string
          description: Nombre del usuario.
        email:
          type: string
          description: Correo electrónico del usuario.
        password:
          type: string
          description: Contraseña del usuario.
        age:
          type: number
          description: Edad del usuario.
        role:
          type: number
          description: Rol del usuario (0 = usuario, 1 = administrador).
        avatar:
          type: string
          description: URL del avatar del usuario.
      example:
        name: Esther
        email: esther@example.com
        password: secret123
        age: 30
        role: 0
        avatar: https://example.com/avatar.jpg

  responses:
    res200:
      type: object
      properties:
        message:
          type: string
          description: Mensaje informativo.
        users:
          type: array
          items:
            $ref: "#/components/schemas/User"
      example:
        message: Usuarios obtenidos correctamente.
        users:
          - name: Esther
            email: esther@example.com
            password: secret123
            age: 30
            role: 0
            avatar: https://example.com/avatar.jpg
          - name: Juan
            email: juan@example.com
            password: hola456
            age: 25
            role: 1
            avatar: https://example.com/avatar2.jpg

    res201:
      type: object
      properties:
        message:
          type: string
          description: Mensaje de éxito.
      example:
        message: Usuarios generados correctamente.

    res400:
      type: object
      properties:
        message:
          type: string
          description: Mensaje informativo de error de cliente.
        statusCode:
          type: number
          description: Código de estado HTTP.
      example:
        message: El parámetro 'n' debe ser un número válido.
        statusCode: 400

    res401:
      type: object
      properties:
        message:
          type: string
          description: Falta autenticación para acceder al recurso.
        statusCode:
          type: integer
      example:
        message: No autorizado. Proporcione un token válido.
        statusCode: 401

    res403:
      type: object
      properties:
        message:
          type: string
          description: El usuario no tiene permisos para acceder al recurso.
        statusCode:
          type: integer
      example:
        message: Acceso denegado. No tiene permisos suficientes.
        statusCode: 403

    res404:
      type: object
      properties:
        message:
          type: string
          description: Mensaje informativo de recurso no encontrado.
        statusCode:
          type: number
          description: Código de estado HTTP.
      example:
        message: No se encontraron usuarios.
        statusCode: 404

    res500:
      type: object
      properties:
        message:
          type: string
          description: Mensaje de error del servidor.
        statusCode:
          type: number
          description: Código de estado HTTP.
      example:
        message: Error interno del servidor.
        statusCode: 500

paths:
  /api/users/mocks/{n}:
    get:
      summary: Generar usuarios.
      description: Genera y guarda `n` usuarios en la base de datos.
      tags:
        - Users
      parameters:
        - name: n
          in: path
          required: true
          schema:
            type: integer
          description: Número de usuarios a generar.
      responses:
        "201":
          description: Usuarios generados correctamente.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/res201"
        "400":
          description: Parámetro no válido.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/res400"
        "500":
          description: Error al generar usuarios.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/res500"

  /api/users:
    get:
      summary: Obtener todos los usuarios.
      description: Retorna todos los usuarios guardados en la base de datos.
      tags:
        - Users
      responses:
        "200":
          description: Usuarios obtenidos correctamente.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/res200"
        "404":
          description: No se encontraron usuarios.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/res404"
        "500":
          description: Error al obtener usuarios.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/res500"
